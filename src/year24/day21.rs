const NUM_CHARS: usize = 16;

const LUT3: [u128; 256] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 21, 26, 16, 18, 18, 26, 21, 12, 27, 22,
    13, 28, 23, 14, 0, 19, 1, 18, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 10, 1, 0, 19, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 18, 0, 1, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 25, 17, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 1, 25, 12, 19, 26, 13, 20, 27, 14, 21, 0, 22,
    0, 0, 0, 0, 21, 1, 10, 11, 12, 19, 20, 13, 20, 21, 0, 17, 0, 0, 0, 0, 16, 18, 1, 10, 21, 12,
    19, 22, 13, 20, 0, 16, 0, 0, 0, 0, 21, 19, 18, 1, 22, 21, 12, 23, 22, 13, 0, 23, 0, 0, 0, 0,
    22, 16, 17, 18, 1, 10, 11, 12, 19, 20, 0, 18, 0, 0, 0, 0, 17, 21, 16, 17, 18, 1, 10, 21, 12,
    19, 0, 17, 0, 0, 0, 0, 22, 22, 21, 16, 19, 18, 1, 22, 21, 12, 0, 24, 0, 0, 0, 0, 23, 17, 18,
    19, 16, 17, 18, 1, 10, 11, 0, 19, 0, 0, 0, 0, 18, 22, 17, 18, 21, 16, 17, 18, 1, 10, 0, 18, 0,
    0, 0, 0, 23, 23, 22, 17, 22, 21, 16, 19, 18, 1,
];
const LUT26: [u128; 256] = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    27622800565,
    30331287706,
    20790420654,
    22411052532,
    22411052532,
    31420065370,
    28154654777,
    14752615084,
    31420065371,
    28154654778,
    14752615085,
    31420065372,
    28154654779,
    14752615086,
    0,
    24095973437,
    1,
    22411052532,
    14287938116,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    25419021194,
    14287938116,
    1,
    0,
    25419021193,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    14752615084,
    22411052532,
    0,
    1,
    28154654777,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    14287938116,
    0,
    30331287705,
    22778092491,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    14287938116,
    0,
    0,
    0,
    0,
    1,
    31420065369,
    14752615084,
    24095973437,
    31420065370,
    14752615085,
    24095973438,
    31420065371,
    14752615086,
    24095973439,
    0,
    27052881364,
    0,
    0,
    0,
    0,
    27052881363,
    1,
    14287938116,
    14287938117,
    14752615084,
    24095973437,
    24095973438,
    14752615085,
    24095973438,
    24095973439,
    0,
    22778092491,
    0,
    0,
    0,
    0,
    20790420654,
    22411052532,
    1,
    14287938116,
    28154654777,
    14752615084,
    24095973437,
    28154654778,
    14752615085,
    24095973438,
    0,
    20790420654,
    0,
    0,
    0,
    0,
    27622800565,
    22411052533,
    22411052532,
    1,
    28154654778,
    28154654777,
    14752615084,
    28154654779,
    28154654778,
    14752615085,
    0,
    27052881365,
    0,
    0,
    0,
    0,
    27052881364,
    20790420654,
    22778092491,
    22778092492,
    1,
    14287938116,
    14287938117,
    14752615084,
    24095973437,
    24095973438,
    0,
    22778092492,
    0,
    0,
    0,
    0,
    20790420655,
    27622800565,
    20790420654,
    22778092491,
    22411052532,
    1,
    14287938116,
    28154654777,
    14752615084,
    24095973437,
    0,
    20790420655,
    0,
    0,
    0,
    0,
    27622800566,
    27622800566,
    27622800565,
    20790420654,
    22411052533,
    22411052532,
    1,
    28154654778,
    28154654777,
    14752615084,
    0,
    27052881366,
    0,
    0,
    0,
    0,
    27052881365,
    20790420655,
    22778092492,
    22778092493,
    20790420654,
    22778092491,
    22778092492,
    1,
    14287938116,
    14287938117,
    0,
    22778092493,
    0,
    0,
    0,
    0,
    20790420656,
    27622800566,
    20790420655,
    22778092492,
    27622800565,
    20790420654,
    22778092491,
    22411052532,
    1,
    14287938116,
    0,
    20790420656,
    0,
    0,
    0,
    0,
    27622800567,
    27622800567,
    27622800566,
    20790420655,
    27622800566,
    27622800565,
    20790420654,
    22411052533,
    22411052532,
    1,
];

fn encode(c: char) -> usize {
    match c {
        'A' => 1,
        'v' => 2,
        '<' => 3,
        '>' => 4,
        '^' => 5,
        x @ '0'..='9' => ((x as u8) - ('0' as u8) + 6) as usize,
        _ => unreachable!(),
    }
}

// there is a set of depth independent optimal moves => a LUT of the replacements can be built
//  since all moves are independent (i.e. their order does not matter) a state becomes a vector of moves
//  the replacement becomes a linear transform => all codes can be added beforehand and transformed as one
//  since the numbe of steps is fixed, we can precompute the matrix
//  the final cout is just a dot with the vector of all 1s => precompute dot with matrix
//  => each part reduces to a singel dot product
pub fn solve(data: &str) -> (String, String) {
    let mut counts = vec![0; NUM_CHARS * NUM_CHARS];
    for inp in data.lines() {
        let mut inp = inp.trim();
        let numval = inp[..inp.len() - 1].parse::<u128>().unwrap();

        let mut old_code = encode('A');
        for c in inp.chars() {
            let curr_code = encode(c);
            counts[old_code * NUM_CHARS + curr_code] += numval;
            old_code = curr_code;
        }
    }

    let p1 = counts
        .iter()
        .zip(LUT3.iter())
        .map(|(x, y)| x * y)
        .sum::<u128>();
    let p2 = counts
        .iter()
        .zip(LUT26.iter())
        .map(|(x, y)| x * y)
        .sum::<u128>();

    (p1.to_string(), p2.to_string())
}
